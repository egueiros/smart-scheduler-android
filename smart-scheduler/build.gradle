apply plugin: 'com.android.library'
apply plugin: 'maven'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'smart-scheduler'

    publishedGroupId = 'io.hypertrack'
    libraryName = 'SmartScheduler'
    artifact = 'smart-scheduler'

    libraryDescription = 'A utility library for scheduling periodic and non-periodic jobs efficiently.'

    siteUrl = 'https://github.com/hypertrack/smart-scheduler-android'
    gitUrl = 'https://github.com/hypertrack/smart-scheduler-android.git'

    libraryVersion = computeVersionName()

    developerId = 'piyushgupta27'
    developerName = 'Piyush Gupta'
    developerEmail = 'piyush@hypertrack.io'

    licenseName = 'The MIT License (MIT)'
    licenseUrl = 'http://opensource.org/licenses/MIT'
    allLicenses = ["MIT"]
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName computeVersionName()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Unit testing dependencies
    testCompile 'junit:junit:4.12'
    // Set this dependency if you want to use the Hamcrest matcher library
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.google.android.gms:play-services-gcm:12.0.0'
}



def computeVersionName() {
    def versionPropsFile = file('gradle.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def value = 0

        def runTasks = gradle.startParameter.taskNames
        if ('internalRelease' in runTasks || 'iR' in runTasks) {
            value = 1;
        }

        def versionMajor = 0
        def versionMinor = 0
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['version'] = versionMajor + "." + versionMinor + "." + versionPatch
        versionProps.store(versionPropsFile.newWriter(), null)

        return versionMajor + "." + versionMinor + "." + versionPatch
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

if (project.rootProject.file('local.properties').exists()) {
    apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
    apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
}